import numpy as np
import pandas as pd
from request.data import Option
import BSPricing 


# Find implied  volatility by iterative way






observed_price = 18
S = 100
K = 115
r = 0.05
T = 1


# observed_price = Option('Google').LastPrice
# S = Option('Google').SpotPrice
# K = Option('Google').Strike
# r = Option('Google').Rrf
# T = Option('Google').TimeToMaturituy # => you should convert here

class ImpliedVolatilityEngine:    

    def __init__(self,S,K,T,r) -> None:
        self.S = S
        self.K = S
        self.T = S
        self.r = S

    def nterative_way(self) -> float: 
        
        volatility_candidates = np.arange(0.01,4,0.0001)
        price_differences = np.zeros_like(volatility_candidates)

        for i in range(len(volatility_candidates)):
            candidate = volatility_candidates[i]
            price_differences[i] = abs(observed_price - BS_CALL(self.S, self.K, self.T, self.r, candidate))
            idx = np.argmin(abs(price_differences))
            impliedVolatility = volatility_candidates[idx]
            return  impliedVolatility
    
    def newton_raphson_algorithm(self) -> float: 
        
        sigma = 0.3
        
        for i in range(max_iterations):

            ### calculate difference between blackscholes price and market price with
            ### iteratively updated volality estimate
            diff = black_scholes_call(S, K, T, r, sigma) - C

            ###break if difference is less than specified tolerance level
            if abs(diff) < tol:
                print(f'found on {i}th iteration')
                print(f'difference is equal to {diff}')
                break

            ### use newton rapshon to update the estimate
            sigma = sigma - diff / vega(S, K, T, r, sigma)

        return sigma


import Option

class OptionStrategy:    
    """ Same underlying"""
    
    def __init__(self, instrumentList : List[Option]) -> None:
        self.instrumentList = instrumentList
        self.payoff = None
        
    def add_Option(option : List[Option]) -> None :
        

        
        

    
    

